<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!-- 
    
        LibProjectReference
        
        These references point to native vcxprojs and have their produced libraries added to the project output.
        
    -->

    <Target Name="AssignLibProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(LibProjectReference)' != '' ">
        <ItemGroup>
            <___LibProjectReference Include="@(LibProjectReference)">
                <_SetPlatform>%(SetPlatform)</_SetPlatform>
            </___LibProjectReference>
        </ItemGroup>
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>
        <AssignProjectConfiguration ProjectReferences="@(___LibProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="true" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="false" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="__LibProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="__LibProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>
        <ItemGroup>
            <_LibProjectReferenceWithConfiguration Include="@(__LibProjectReferenceWithConfiguration)">
                <SetPlatform>%(_SetPlatform)</SetPlatform>
            </_LibProjectReferenceWithConfiguration>
        </ItemGroup>
    </Target>

    <Target Name="GetLibProjectReferences" DependsOnTargets="AssignLibProjectConfiguration" Condition=" '@(_LibProjectReferenceWithConfiguration)' != '' ">
        <ItemGroup>
            <__LibProjectReference Include="@(_LibProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <LibTargetPath Condition=" '%(_LibProjectReferenceWithConfiguration.LibTargetPath)' != '' ">$([MSBuild]::EnsureTrailingSlash('%(_LibProjectReferenceWithConfiguration.LibTargetPath)'))</LibTargetPath>
                <LibPackagePath Condition=" '%(_LibProjectReferenceWithConfiguration.LibPackagePath)' != '' ">$([MSBuild]::EnsureTrailingSlash('%(_LibProjectReferenceWithConfiguration.LibPackagePath)'))</LibPackagePath>
            </__LibProjectReference>
        </ItemGroup>
        <AddIndexMetadata Items="@(__LibProjectReference)" MetadataName="_Index">
            <Output TaskParameter="Items" ItemName="_LibProjectReference" />
        </AddIndexMetadata>
    </Target>

    <Target Name="GetLibProjectReferenceItems" DependsOnTargets="GetLibProjectReferences" Inputs="@(_LibProjectReference)" Outputs="@(_LibProjectReference->'%(Identity)\%(_Index)\null')" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_LibProjectReference)' != '' ">
        <ItemGroup>
            <_LibProjectReferencesToTarget Include="@(_LibProjectReference)">
                <Properties>%(_LibProjectReference.SetConfiguration);%(_LibProjectReference.SetPlatform)</Properties>
            </_LibProjectReferencesToTarget>
        </ItemGroup>
        <MSBuild Projects="@(_LibProjectReferencesToTarget)" Targets="Build" BuildInParallel="False" RemoveProperties="$(_GlobalPropertiesToRemoveFromProjectReferences);TargetFramework;RuntimeIdentifier" />
        <MSBuild Projects="@(_LibProjectReferencesToTarget)" Targets="GetTargetPath" BuildInParallel="False" RemoveProperties="$(_GlobalPropertiesToRemoveFromProjectReferences);TargetFramework;RuntimeIdentifier" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedLibProjectReferenceTargetOutput" />
        </MSBuild>
        <ItemGroup>
            <_LibProjectReferenceTargetOutput Include="@(_ResolvedLibProjectReferenceTargetOutput)">
                <ProjectName>%(_ResolvedLibProjectReferenceTargetOutput.ProjectName)</ProjectName>
                <LibTargetPath>%(_ResolvedLibProjectReferenceTargetOutput.LibTargetPath)</LibTargetPath>
                <LibPackagePath>%(_ResolvedLibProjectReferenceTargetOutput.LibPackagePath)</LibPackagePath>
                <Pack>%(_ResolvedLibProjectReferenceTargetOutput.Pack)</Pack>
            </_LibProjectReferenceTargetOutput>
            <_LibProjectReferenceItems Include="@(_LibProjectReferenceTargetOutput)">
                <TargetPath>%(RecursiveDir)%(Filename)%(Extension)</TargetPath>
            </_LibProjectReferenceItems>
        </ItemGroup>
    </Target>

    <Target Name="GetLibProjectReferenceCopyToOutputDirectoryItems" BeforeTargets="Build;AssignTargetPaths" DependsOnTargets="GetLibProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' and '@(_LibProjectReferenceItems)' != '' ">
        <ItemGroup>
            <ContentWithTargetPath Include="@(_LibProjectReferenceItems)" Condition=" '%(_LibProjectReferenceItems.LibTargetPath)' != '' ">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>$([MSBuild]::MakeRelative('.', '%(_LibProjectReferenceItems.LibTargetPath)%(_LibProjectReferenceItems.TargetPath)'))</TargetPath>
                <Pack>false</Pack>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            AssignLibProjectConfiguration;
            GetLibProjectReferences;
            GetLibProjectReferenceItems;
            GetLibProjectReferenceCopyToOutputDirectoryItems;
            $(GetCopyToOutputDirectoryItemsDependsOn);
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GetLibProjectReferenceTfmSpecificContent</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <Target Name="GetLibProjectReferenceTfmSpecificContent" DependsOnTargets="GetLibProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' and '@(_LibProjectReferenceItems)' != '' ">
        <ItemGroup>
            <TfmSpecificPackageFile Include="@(_LibProjectReferenceItems)" Condition=" '%(_LibProjectReferenceItems.LibTargetPath)' != '' And '%(_LibProjectReferenceItems.Pack)' != 'false' ">
                <PackagePath>contentFiles\any\$(TargetFramework)\%(_LibProjectReferenceItems.LibTargetPath)</PackagePath>
                <PackagePath Condition=" '%(_LibProjectReferenceItems.LibPackagePath)' != '' ">contentFiles\any\$(TargetFramework)\%(_LibProjectReferenceItems.LibPackagePath)</PackagePath>
            </TfmSpecificPackageFile>
        </ItemGroup>
    </Target>

    <Target Name="GetLibProjectReferencePackageItems" DependsOnTargets="GetLibProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_LibProjectReferenceItems)' != '' ">
        <ItemGroup>
            <_PackageFiles Include="@(_LibProjectReferenceItems)" Condition=" '%(_LibProjectReferenceItems.LibPackagePath)' != '' And '%(_LibProjectReferenceItems.Pack)' != 'false' ">
                <PackagePath>%(_LibProjectReferenceItems.LibPackagePath)</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetLibProjectReferenceItemsBeforePackageFilesDependsOn>
            AssignLibProjectConfiguration;
            GetLibProjectReferences;
            GetLibProjectReferenceItems;
            GetLibProjectReferencePackageItems;
            $(GetLibProjectReferenceItemsBeforePackageFilesDependsOn);
        </GetLibProjectReferenceItemsBeforePackageFilesDependsOn>
    </PropertyGroup>

    <Target Name="GetLibProjectReferencePackageItemsBeforeGetPackageFiles" DependsOnTargets="$(GetLibProjectReferenceItemsBeforePackageFilesDependsOn)" BeforeTargets="_GetPackageFiles" Condition=" '$(DesignTimeBuild)' != 'true' ">

    </Target>

</Project>
